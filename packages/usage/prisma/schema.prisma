generator zod_prisma_crud_types {
  provider          = "node ../../node_modules/zod-prisma-crud-types"
  output            = "../types/"
  ignoredFieldNames = "id, created_at, updated_at"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  name              String?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  notification_type NotificationType
}

enum NotificationType {
  newPosts
  newComments
  newFollowers
  reply
  heartOnPost
  heartOnComment
  heartOnReply
}

enum Language {
  Typescript
  Javascript
  Rust
  Go
  Python
  Cpp
}

//////////

enum CourseComponent {
  LAB
  LECTURE
  SECTION
  SEMINAR
  SUPERVISED_STUDY
  TUTORIAL
}

enum Career {
  UNDERGRADUATE_PROGRAM
  GRADUATE_PROGRAM
  MEDICINE_PROGRAM
}

model Course {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  cid           String @unique
  code          String @unique
  course_number String

  subject_code String
  subject      Subject @relation(fields: [subject_code], references: [code])

  description String
  name        String
  long_name   String
  notes       String?
  version     Int
  units       Int
  aka         String?

  prereq       String?
  prereq_json  Json?
  coreq        String?
  coreq_json   Json?
  antireq      String?
  antireq_json Json?

  is_active     Boolean
  is_multi_term Boolean
  is_nogpa      Boolean
  is_repeatable Boolean

  components      CourseComponent[]
  course_group_id String
  coursedog_id    String

  course_created_at           DateTime
  course_effective_start_date DateTime
  course_last_updated_at      DateTime

  departments Department[]
  faculties   Faculty[]

  career     Career
  topics     CourseTopic[]
  grade_mode GradeMode

  @@unique([subject_code, course_number], map: "course_subject_course_number_unique")
  @@map("courses")
}

model CourseTopic {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  number        String  @unique @map("number")
  name          String  @unique
  long_name     String  @unique
  description   String
  is_repeatable Boolean
  units         Int
  link          String

  course_id String
  course    Course @relation(fields: [course_id], references: [id])

  @@unique([number, course_id], map: "course_topic_number_course_unique")
  @@map("course_topics")
}

model Faculty {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name String @unique
  code String @unique

  departments Department[]
  courses     Course[]

  @@index([code], map: "faculty_code_unique")
  @@map("faculties")
}

model Department {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name         String  @unique
  display_name String
  code         String  @unique
  is_active    Boolean

  faculties Faculty[]
  courses   Course[]
  subjects  Subject[]

  @@map("departments")
}

enum GradeMode {
  CDF // Credit/D grade/Fail
  CNC // Credit/No Credit
  CRF // Credit/Fail
  ELG // English Language Graded
  GRD // Graded
  MTG // Multi-Term
}

enum TermName {
  WINTER
  SPRING
  SUMMER
  FALL
}

model Term {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  term_id String   @unique
  year    Int
  name    TermName

  @@map("terms")
}

model Subject {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  code  String @unique
  title String @unique

  departments Department[]
  courses     Course[]

  @@unique([code, title], map: "subject_code_title_unique")
  @@unique([title], map: "subject_title_unique")
  @@unique([code], map: "subject_code_unique")
  @@map("subjects")
}
